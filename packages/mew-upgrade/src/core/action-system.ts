/**
 * @license
 * Copyright 2025 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @file Implements the ActionSystem, the agent's "body".
 * It takes plans from the mind and executes them by calling tools.
 */

// Placeholder for a tool call definition
export interface Action {
  tool: string;
  params: Record<string, any>;
  id: string;
}

// Placeholder for a plan generated by the mind
export interface PlanDeAccion {
  id: string;
  justification: string;
  steps: Action[];
}

/**
 * The ActionSystem is responsible for executing plans.
 * It maintains a queue of actions and calls the appropriate tools.
 */
export class ActionSystem {
  private actionQueue: Action[] = [];
  private isRunning = false;

  // In a real implementation, this would be the ToolRegistry.
  private toolRegistry: Record<string, (params: any) => Promise<any>> = {};

  constructor() {
    // Placeholder for tool registration
    this.toolRegistry['run_shell_command'] = async (params) => {
      console.log(`ActionSystem: Pretending to run shell command: ${params.command}`);
      return { success: true, output: 'Command executed (simulation).' };
    };
    this.toolRegistry['write_file'] = async (params) => {
      console.log(`ActionSystem: Pretending to write file: ${params.file_path}`);
      return { success: true };
    };
  }

  /**
   * Receives a plan and adds its steps to the execution queue.
   * @param plan The plan to execute.
   */
  submitPlan(plan: PlanDeAccion): void {
    console.log(`ActionSystem: Plan ${plan.id} submitted with ${plan.steps.length} steps.`);
    this.actionQueue.push(...plan.steps);
    this.run();
  }

  private async run(): Promise<void> {
    if (this.isRunning) return;
    this.isRunning = true;

    while (this.actionQueue.length > 0) {
      const action = this.actionQueue.shift()!;
      console.info(`ActionSystem: Executing action ${action.id}: ${action.tool}`);
      
      const toolExecutor = this.toolRegistry[action.tool];
      if (toolExecutor) {
        try {
          await toolExecutor(action.params);
          // In a real system, the result could be fed back into memory.
          console.log(`ActionSystem: Action ${action.id} completed.`);
        } catch (error) {
          console.error(`ActionSystem: Error executing action ${action.id}`, error);
        }
      } else {
        console.error(`ActionSystem: Tool not found: ${action.tool}`);
      }
    }

    this.isRunning = false;
    console.log("ActionSystem: All actions complete.");
  }
}
